"""
In order to control a rover, NASA sends a simple string of letters. The possible letters are 'L', 'R' and 'M'. 'L' and 'R' makes the rover spin 90 degrees left or right respectively, without moving from its current spot.

Assume that the square directly North from (x, y) is (x, y+1).

The first line of input is the upper-right coordinates of the plateau, the lower-left coordinates are assumed to be 0,0.

The position is made up of two integers and a letter separated by spaces, corresponding to the x and y co-ordinates and the rover's orientation.

Each rover will be finished sequentially, which means that the second rover won't start to move until the first one has finished moving.

"""
==============
Test scenario:
==============
Input: 5 5 
Results in platue:
   _ _ _ _ _ _
5 |_|_|_|_|_|_|
4 |_|_|_|_|_|_|
3 |_|_|_|_|_|_|
2 |_|_|_|_|_|_|
1 |_|_|_|_|_|_|
0 |_|_|_|_|_|_|
   0 1 2 3 4 5	

Input: 1 2 N
Results in a new rover (1,2) facing north:
   _ _ _ _ _ _
5 |_|_|_|_|_|_|
4 |_|_|_|_|_|_|
3 |_|_|_|_|_|_|
2 |_|^|_|_|_|_|
1 |_|_|_|_|_|_|
0 |_|_|_|_|_|_|
   0 1 2 3 4 5	

Input: LMLMLMLMM
Break down of input stages:  1(LM) 2(LM) 3(LM) 4(LM) 5(M)
1. Turn & Move. - Rover is (0,2) facing W 
2. Turn & Move. - Rover is (0,1) facing S
3. Turn & Move. - Rover is (1,1) facing E
4. Turn & Move. - Rover is (1,2) facing N
5. Move. - Rover is (1,3) facing N

   _ _ _ _ _ _
5 |_|_|_|_|_|_|
4 |_|_|_|_|_|_|
3 |_|^|_|_|_|_|
2 |_|_|_|_|_|_|
1 |_|_|_|_|_|_|
0 |_|_|_|_|_|_|
   0 1 2 3 4 5	

Input: 3 3 E
Results in a new rover (3,3) facing E:

   _ _ _ _ _ _
5 |_|_|_|_|_|_|
4 |_|_|_|_|_|_|
3 |_|^|_|>|_|_|
2 |_|_|_|_|_|_|
1 |_|_|_|_|_|_|
0 |_|_|_|_|_|_|
   0 1 2 3 4 5

Input: MMRMMRMRRM
Break down of input stages:  1(MM) 2(RM) 3(MR) 4(MR) 5(RM)
1. Move & Move. - Rover is (5,3) facing E
2. Turn & Move. - Rover is (5,2) facing S
3. Move & Turn. - Rover is (5,1) facing W
4. Move & Turn. - Rover is (4,1) facing N
5. Turn & Move. - Rover is (5,1) facing E

   _ _ _ _ _ _
5 |_|_|_|_|_|_|
4 |_|_|_|_|_|_|
3 |_|^|_|_|_|_|
2 |_|_|_|_|_|_|
1 |_|_|_|_|_|>|
0 |_|_|_|_|_|_|
   0 1 2 3 4 5

-----------------
Assumptions made:
-----------------
Rovers cant move off the platue grid
Rovers may not take grid blocks already occupied

========
Turning:
========

N = 0
E = 1
S = 2
W = 3
Turn right = +1
Turn left = -1
Turning formula = (CurrentDirection + Turn) % 4

              0, 1, 2, 3
Directions = (N, E, S, W)
              ^
             Turn left
             Backspace 1
             (N, E, S, W)
					   ^


xMove = 0
yMove = 0

Could do it:
if dir == 0:
	yMove = 1
elif dir == 1:
	xMove = 1
elif dir == 2:
	yMove = -1
elif dir == 3:
	xMove = -1

or 

if dir % 2 == 0:
	yMove = 1 if dir != 2 else -1
else:
	xMove = 1 if dir != 3 else -1

========
Mapping:
========

Utilise 2x2 array.
-1 = Free spaces
0,1,2,3 = Rovers and their corresponding directions

=======
Checks:
=======

--------------
Out of bounds or rover collision:
--------------
if (x + xMove > 0 and y + yMove > 0) and (Array[x+xMove][y+yMove] == -1):
	Array[x][y] = 0
	Array[x+xMove][y+yMove] = 1
else:
	pass


==================
Handling of input:
==================

Run time orienteted (stateless)
Input fed through text file.

--------
Movement:
--------

Utilise a stack, with pos 0 being the current rover to get the first set of inputted moves. 

New rovers are pushed to the stack. 

Pop off stack when move input is given and rover has moved to it's new points.

--------------
Type of input:
--------------
Utilise regex, to determine the type of input
First input is the size of the map. regex = "\d\s\d"
Two spaces define new rover. regex = "\d\s\d\s[NnEeSsWw]"




===============
Error Handling:
===============

------
Input:
------

Movement input can be given with space or other invalid chars
Solution: Prelist a dictionary with all valid chars and check input chars against it. Remove all invalid characters.

Sizing input and new rover creation input is strict format.

Movement input can be given before rover creation input
Possible solution: Maybe keep a stack for movements, else ignore



==========
Unit test:
==========

Python unit test library

Scenario checks -\ Out of bounds
				 \ Rover collisions

Input test -\ Movement input with multiple invalid chars
			\ Movement input given before rover creation input
